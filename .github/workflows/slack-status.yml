name: Slack Status
on:
  push:
  workflow_dispatch:
  schedule:
    - cron: "* * * * *"
jobs:
  write-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: npm install @slack/bolt
      - uses: actions/github-script@v6
        id: status
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
          SLACK_MEMBER_ID: ${{ vars.SLACK_MEMBER_ID }}
        with:
          script: |
            const { App } = require('@slack/bolt');

            const app = new App({
              token: process.env.SLACK_BOT_TOKEN,
              signingSecret: process.env.SLACK_SIGNING_SECRET
            });

            return (async () => {
              try {
                const res = await app.client.users.profile.get({ user: process.env.SLACK_MEMBER_ID });
                return {
                  SLACK_STATUS: res?.profile?.status_text || '',
                  SLACK_EMOJI: res?.profile?.status_emoji || ''
                };
              } catch {
                return {
                  SLACK_STATUS: '',
                  SLACK_EMOJI: ''
                };
              }
            })();
      - uses: austenstone/markdown-interpolation-action@main
        with:
          values: ${{ steps.status.outputs.result }}
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_author: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
      - run: |
          gh api graphql -F message='${{ fromJSON(steps.status.outputs.result).SLACK_STATUS }}' -F emoji='${{ fromJSON(steps.status.outputs.result).SLACK_EMOJI }}' -f query='
            mutation($message: String, $emoji: String) {
              changeUserStatus(input: {
                message: $message
                emoji: $emoji
              }) {
                clientMutationId
              }
            }
          '
        env:
          GH_TOKEN: ${{ secrets.TOKEN_USER_STATUS }}